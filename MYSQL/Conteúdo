TIPOS PRIMITIVOS

Numérico: 
Inteiro - Tinyint, Smallint, Int, MediumInt, BigInt.
Real - Decimal, Float, Double, Real
Lógico - Bit, Boolean

Data/Tempo:
Date, DateTime, TimeStamp, Time, Year

Literal:
Caractere -  Char,VarChar
Texto - TinyText, Text, MediumText, LongText
Binário - TinyBlob, Blob, MediumBlob, LongBlob
Coleção -  Enum, Set

Espacial - Geometry, Point, Polygon, MultiPolygon

Observação:
Constraint - não tem aspas
Default - Padrão 
DDL - Data Definition Language / Create Database; Create Table; Drop Table; Alter Table
DML - Data Manipulation Language / Insert Into; UPDATE; DELETE; TRUNCATE; SELECT


COMANDOS:

Use nomedoDataBase; - Selecionar o Database 
describe nomedatabela; - aparece o desenho da tabela
show database; - aparece os database criados
show tables - mostrar nome das tabelas
status - Current database, nome do database selecionado
drop database nomedoDataBase - deleta o Database
Default Character Set utf8 - caracteres com ascentuação latina
Default Collate utf8_general_ci; - Definição dos caracteres
Not Null - Campos Obrigatóriamente digitáveis
Enum ('M','F') ou set ('M','F') - Seleciona quais são os valores que serão aceitos
decimal (5,2) - Quantidade de total de digitos e quantidade de digitos depois da virgula
Default Brasil - se ninguem digitar nada, por padrão será "Brasil"
Primary key - chave primaria, impede que haja cadastros iguais.
VarChar - guarda até 30 letras
AlterTable - Alterar tabela 
insert into - inserir dados
UNIQUE - não deixa colocar 2 cursos com o mesmo nome
unsigned - (sem sinal) Economiza 1byte para cada registro que tem a carga registrada

Operadores Relacionais: =(Igual); !=ou<>(Diferente) ;<(menor) ;>(Maior) ;=>(Menor igual) ;=<(Maior igual)

/*Salvar uma cópia do Banco de Dados EXPORT e IMPORT */
SERVER - DATA EXPORT - SELECIONA O DATABASE E O SCHEMA - START EXPORT
/*Criará um DUMP do seu DATABASE e selecionar a opção INCLUDE CREATE SCHEMA*/

/*Vai importar o DATABASE já pronto*/
SERVER - DATA IMPORT - SELECIONA O DATABASE - START IMPORT

/*mostra o comando usado para a criação da tabela*/
Console: show create table nomedatabela;

/*mostra o comando usado para a criação do Database*/
Console: show create database nomedoDataBase;

/*order by -  ordernar / Ordenar em ordem do nome alfabética ascendente, asc é opcional*/
select * from cursos;  /* ou */   select * from cursos;    
order by nome;         /* ou */    order by nome asc;

/*Ordenar em ordem do nome inverso, descendente */
select * from cursos
order by nome desc;

/* Para seleção especifica apenas escrever e não utilizar o * (asteristico significa todas as colunas), selecionar apenas nome, cargo e ano */
select nome, carga, ano from cursos
order by nome;

/* Primeiro ordenar por ano e depois ordena por nome */
select ano, nome, carga,  from cursos
order by ano, nome;

/* Filtrar somente as linhas, tabela cursos, onde o ano é 2016, ordenado pelo nome */
select *  from cursos
where ano = '2016' /*aspa é opcional*/
order by nome;

/*selecionar somente nome e descrição da tabela cursos, onde o ano menor ou igual a 2015, ordenado pelo nome */
select nome, descricao from cursos
where ano <= 2015
order by nome;

/*Selecionar o nome e ano da tabela cursos, onde somente o ano entre 2014 e 2016 e oerdenado por ano do maior para o menor e nome ordem alfabética*/
	select nome, ano from cursos
	where ano between 2014 and 2016
    order by ano desc, nome asc;

/* Utilizando o IN vai mostrar somente uma pesquisa especifica, no caso em 2014 e 2016 */ 
    select nome, descricao, ano from cursos
	where ano in (2014, 2016)
    order by ano;

/*Utilizando o AND só irá aparecer quando todas as informações se enquadram no filtro */
    select nome, descricao, totaulas from cursos
	where carga > 35 and totaulas <30;

/*Utilizando o or basta um filtro se verdadeiro que aparecerá */
    select nome, descricao, totaulas from cursos
	where carga > 35 or totaulas <30;

/*Operador like, todo curso que começa com a letra A */
    select * from cursos
    where nome like 'A%';

/*Todo curso que terminam com a letra A */
    select * from cursos
    where nome like '%A';

/*Todo curso que tenham a letra A em qualquer parte da palavra */
    select * from cursos
    where nome like '%A%';

/*Todo curso que não tenham a letra A em qualquer parte da palavra */
    select * from cursos
    where nome not like '%A%';

/*Todo curso que começa com PH e termine com a letra P*/
    select * from cursos
    where nome like 'ph%p%';

/* _=sublinhado/underline - Todo curso que começa com PH e termine com alguma coisa, algum caractere */
    select * from cursos
    where nome like 'ph%p_';

/*distinct - seleciona sem repetição todas as nacionaliades */
    select distinct nacionalidade from Pessoas;

/*Count(*) - Conta a quantidade de cursos registrado */
       select count(*) from cursos;
/*COUNT() = Contar Nesse exemplo é o total de cursos que tem a carga maior de 40, o Count(*) soma o total de resgistros */
select count(*) from cursos where carga >40;

/*COUNT() = Contar - Conta a quantidade de nomes registados na tabela cursos */
select count(nome) from cursos;

/* MAX = Máximo - Seleciona qual é a maior carga entre os cursos */
select max(carga) from cursos;

/* MIN() = Minimo Seleciona qual é a menor carga entre os cursos */
select min(carga) from cursos;

/* MIN() = Minimo - Seleciona todos os nome com o minimo de aulas da tabela curso onde o ano é em 2016 */
select nome, min(totaulas) from cursos where ano = '2016';

/* SUM() = Somatório - Soma total de aulas da tabela curso do ano de 2016 */
select sum(totaulas) from cursos where ano = '2016';

/*AVG = Média - No caso ele soma e divide pela quantidade de cursos, faz a média */
select AVG(totaulas) from cursos;

/*Distinguir - gera uma listagem com todas as cargas possíveis, no caso do exemplo ordenador por carga.*/
select distinct carga from cursos order by carga;

/* Agrupando Registros - vai selecionar as tuplas, os registros agrupados por carga*/
/*group by - significa agrupar por */
select carga from cursos group by carga; 

/* Acrentando o count() ele contará a quantidade de cursos agrupados por carga */
select carga, COUNT(nome) from cursos group by carga; 

/*Irá mostrar 2H cursos de 40H e 4 cursos de 60 */
select carga, COUNT(nome) from cursos where totaulas = 30;
select * from crusos where totaulas = 30; 

/*Selecionar somente quem tem o contador maior que 3*/
select carga, conunt(nome) from cursos 
group by carga having count(nome) >3;

/*seleciona os anos da tabela cursos, onde o total de aulas seja acima de 30, vai agrupar a seleção por ano e dentro do agrupamento só vai mostrar acima de 2013 ordenador descendente*/
select ano, count(*) from cursos where totaulas >30 group by ano
having ano > 2013 order by count(*) desc;

/*Média de horas de todos os cursos*/
select AVG(carga) from cursos

/* Seleciona a carga e o total de horas dos cursos onde o ano seja acima de 2015, vou agrupar por carga, mas irá mostrar somente quem está acima da carga, seleciona, filtra, agrupa e mostra somente o resultado que está acima de outro SELECT*/
select carga, count(*) from cursos
where ano > 2015 group by carga 
having carga (select AVG(carga) from cursos );


MODELO RELACIONAL:
um pra um: decido a entidade dominante e jogo a chave estrangeira para a entidade dominante, os atributos precisam ser compativeis
um pra n / um pra muitos - pega a chave primaria do lado um e joga no lado muitos como chave estrangeira.
n pra n / muito pra muitos - 3 entidades ligadas 2 a 2 com relacionamento um pra muitos, chave primaria vai pro lado MUITOS. chaves primarias vão para a entidade central. 

Enginer para criação de tabelas compativeis para chaves estrangeiras: INNODB, XTRADB, MyISAM.
ACID - Atomica, Consistência, Isolamento, Durabilidade

/*Adicionando uma coluna e a tornando para chave primaria Foreign key, deverá aparecer tipo MUL que seria Multipla*/
alter table pessoas add column cursopreferido int;
alter table pessoas add foreign key (cursopreferido)
references cursos (idcurso);

/* Aluno 1 vai gostar do curso 6 */
update pessoas set cursooreferido = '6' where id = '1';

/* InnerJoin ou Join vai somente fazer quais tem a ligações */
/* Sempre que utilizar o JOIN precisa utilizar o ON */
/* Join - juntar todos os curos a pessoas */
select pessoas.nome, pessoas.cursopreferido, cursos.nome, cursos.ano
 from pessoas inner join cursos; 


/*Ligação da chave primaria com a cheve estrageira pessoas */
select pessoas.nome, pessoas.cursopreferido, cursos.nome, cursos.ano
 from pessoas inner join cursos on cursos.idcurso = pessoas.cursopreferido order by pessoas.nome;;

/* utilizando a "a" para apelidor/abreviar*/ 
 select p.nome, c.nome, c.ano
 from pessoas as p inner join cursos as c on c.idcurso = p.cursopreferido
 order by p.nome;

 /*left outer joint ou left join - vai aparecer dando preferência a tabela da esquerda, que no caso é pessoas*/
 select p.nome, c.nome, c.ano
 from pessoas as p left outer join cursos as c on c.idcurso = p.cursopreferido;

/* A preferência vai para a tabela ao lado direito, que no caso é o cursos */ 
 select p.nome, c.nome, c.ano
 from pessoas as p right outer join cursos as c on c.idcurso = p.cursopreferido;


Criação de 

 select p.nome, c.nome from pessoas p 
 join assiste a 
 on p.id = a.idpessoa
 join cursos c
 on c.idcurso = a.idcurso
 order by p.nome;

/* junção de 3 tabelas*/
 select p.nome, c.nome from pessoas p 
 join assiste a 
 on p.id = a.idpessoa
 join cursos c
 on c.idcurso = a.idcurso
 order by p.nome;










